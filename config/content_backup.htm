<h1>About</h1>
<p><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/4c4a24557fdd74b5877659133b512722/raw/4be044a0cbcb4f9658111ba5f81d3bd11f4bd661/password_generator.py">w5 password_generator</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入亂數模組
import random
# 導入字串模組
import string
# 利用 def 關鍵字定義函式
# 函式的輸入變數可以設定初始值
def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    # 函式內以多行註解說明函式功能
    """Generate random password
    """
    # 利用 return 關鍵字將所產生的亂數字串傳回
    return ''.join(random.choice(chars) for _ in range(size))
# 建立一個變數與隨後的字串對應
pass_string = "abcdefghkmnpqrstuwxyz123456789"
# 利用重複迴圈呼叫 password_generator() 函式 10 次
for i in range(10):
    print(password_generator(4, pass_string))</pre>
<p></p>
<p>cmsite: wcms use <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> as submodule</p>
<p><a href="https://github.com/mdecp2022/site-40923118">個人倉儲連結</a></p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
<h1>w6</h1>
<p>心得</p>
<p>雖然上課的時候跟不上老師的進度，不過多看幾次recordings中的影片，至少還做得出來，雖然w6的作業我拖到w14時才完成，但經過反覆瀏覽影片最後我看懂了一些程式所做的指令像是多行註解(""")、單行註解(#)，也知道要如何切割、分頁、如何置入超文件。</p>
<p></p>
<p><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/a28b61ae1a907955e03b464d164e7f03/raw/5973366e0e5fe7ed76e21fefc92ea13694c739fc/list_1a_static_site.py+random_draw_1a.py">隨機抽取5位同學的個人網站</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import random

brython_div1 = document["brython_div1"]

url = "https://mde.tw/studlist/2022fall/1a.txt"
data = open(url).read().split("\n")
mdecp2022 = "https://mdecp2022.github.io/site-"
data = data[1:-1]
random.shuffle(data)
for i in data[:5]:
    stud = i.split("\t")
    stud_num = stud[0]
    github_acc = stud[1]
    #print(stud_num, github_acc)
    if github_acc == "":
        github_acc = stud_num
    site = mdecp2022 + github_acc
    link = html.A(stud_num, href=site)
    brython_div1 &lt;= link
    brython_div1 &lt;= html.BR()</pre>
<p></p>
<h1>Guide to Brython H1</h1>
<div>請閱讀<a href="https://stackabuse.com/an-introductory-guide-to-brython/">此文</a>並整理文章重點</div>
<div>雖然老師希望我們盡可能的不要使用google翻譯但是內容太多了</div>
<div>以下為重點整理</div>
<div></div>
<div>Brython介紹<br/>在開發Web時我們會使用多種技術和語言。後端可以用Java（Spring Boot），Python（Django或Flask）或JavaScript（Node.js）構建，前端則常用JavaScript（React，Angular等）完成。有時會用混合方法，讓伺服器端渲染頁面，在前端框架中完成最終的修飾。<br/>近年來JavaScript擴展了原始功能，以支援JavaScript驅動的後端和前端。用JavaScript編寫Web最常見方法是使用MEAN堆疊。一個MongoDB資料庫，Node.js帶有Express.js用於後端，Angular（或React）用於前端。<br/>但如果要使用Python開發你的應用程式呢？雖然嚴格專注於一種程式設計語言是不可取的(語言是工具)，專注於一種工具會讓你不那麼靈活-但單語言應用程式仍有空間。<br/>Brython可能是解決方案！它是JavaScript庫，能在瀏覽器中運行Python代碼。(Brython代表Browser Python)<br/>Brython的主要目標是取代JavaScript，並將Python作為Web的主角<br/>本語言，用於您的應用程式：<br/><br/>&lt;html&gt;<br/> &lt;head&gt;<br/> &lt;script src="/brython.js"&gt;&lt;/script&gt;<br/> &lt;/head&gt;<br/> &lt;body onload="brython()"&gt;<br/> &lt;script type="text/python"&gt;<br/> import browser<br/> browser.document &lt;= "Hello world!"<br/> &lt;/script&gt;<br/> &lt;/body&gt;<br/>&lt;/html&gt;<br/><br/><br/>通常不支援的類型可以解釋我們編寫的Python代碼。我們列印了Hello World消息，類似JavaScript消息。&lt;script&gt;text/pythonbrowser.documentdocument<br/>在Brython介紹-可了解如何安裝、初始化、設置頁面樣式Brython，並和一些替代方案進行比較<br/><br/>安裝Brython<br/>安裝Brython的最方便的方法可能是不安裝它。如果不需要將其本地安裝到PC上，只需要在靜態網頁上載入即可向頁面添加一些動態功能，則應考慮簡單地導入外部資源。<br/>在HTML頁面的部分載入庫。這樣用戶端將在PC上載入HTML頁面的同時下載庫。<br/>為了實現，我們將從一些託管最新穩定版本的Brython在線的CDN（內容交付網路）載入我們的庫。<br/>內容交付網路是一組託管某些數據（代碼、影片內容、圖像等）的分散式伺服器。這類型的網路很可靠，幾乎沒有停機時間。使它們成為託管代碼庫的理想選擇。<br/><br/>有幾個CDN可供選擇，三個常用：<br/><br/>&lt;!-- Option 1 : jsDelivr CDN --&gt;<br/>&lt;script src="https://cdn.jsdelivr.net/npm/brython@3.9.1/brython.min.js"&gt;&lt;/script&gt;<br/>&lt;script src="https://cdn.jsdelivr.net/npm/brython@3.9.1/brython_stdlib.js"&gt;&lt;/script&gt;<br/><br/>&lt;!-- Option 2: CloudFlare CDN --&gt;<br/>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.9.1/brython.min.js"&gt;&lt;/script&gt;<br/>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.9.1/brython_stdlib.min.js"&gt;&lt;/script&gt;<br/><br/>&lt;!-- Option 3: GitHub as the CDN --&gt;<br/>&lt;!-- Choose this option if you want to use the latest developement version --&gt;<br/>&lt;script src="https://raw.githack.com/brython-dev/brython/master/www/src/brython.js"&gt;&lt;/script&gt;<br/>&lt;script src="https://raw.githack.com/brython-dev/brython/master/www/src/brython_stdlib.js"&gt;&lt;/script&gt;<br/><br/>通過Pip安裝Brython。<br/>想讓Brython有更靈活性，可以安裝它：<br/>$ pip3 install brython<br/>pip將在電腦上下載並安裝。<br/><br/>驗證Brython是否成功安裝：<br/>$ pip show brython <br/>這將列印出版本，和Brython軟體包的一些基本資訊：<br/>Name: brython<br/>Version: 3.9.2<br/>Summary: Brython is an implementation of Python 3 running in the browser<br/>Home-page: http://brython.info<br/>Author: Pierre Quentel<br/>Author-email: quentel.pierre@orange.fr<br/><br/>License: BSD<br/><br/>初始化Brython專案<br/>安裝Brython後，下一步是創建一個簡單的項目來測試功能。要建立專案，請創建新資料夾並移入其中：<br/>$ mkdir brython-project<br/>$ cd brython-project<br/>執行以下命令來初始化Brython專案：<br/>$ brython-cli --install<br/>建立並初始化Brython專案，包括起始專案目錄和檔案層次結構：<br/>brython-project<br/> | brython.js<br/> | brython_stdlib.js<br/> | demo.html<br/> | index.html<br/> | README.md<br/> | unicode.txt<br/><br/>這些檔的用途：<br/>brython.js- Brython核心引擎，包括最常用的模組，如果我們選擇不在本地安裝Brython，則使用此標籤將此檔包含在HTML頁面中。browserbrowser.htmljavascript&lt;script&gt;<br/>brython_stdlib.js- 由Brython支援的Python標準庫中的所有包和模組組成。<br/>demo.html- 運行Brython的簡單HTML頁面，展示了一些有趣的用例和我們如何利用Brython修改靜態HTML頁面的示例。<br/>index.html- 一個簡單的HTML頁面。Hello World<br/><br/>若簡單的將Web瀏覽器打開，則有其局限性，故建議先啟動本地主機伺服器。<br/>安裝后，我們可以啟動伺服器：<br/>$ python3 -m http.server<br/>在（預設）上啟動本地主機，並且您應該能夠通過導航到所選Web瀏覽器的位址欄來訪問該頁面。port 8000demo.htmlhttp://localhost:8000/demo.htmlhttp://0.0.0.0:8000/demo.html<br/>如果埠 8000 當前由其他進程使用，則必須定義要使用的另一個埠（例如 8080）：<br/><br/>$ python3 -m http.server 8080<br/>要創建能夠運行Python的新HTML頁面，需要在檔部分中導入theandfiles。然後繼續在HTML檔本身中編寫Python：brython.jsbrython_stdlib.jshead<br/>&lt;script src="brython.js"&gt;&lt;/script&gt;<br/>&lt;script src="brython_stdlib.js.js"&gt;&lt;/script&gt;<br/><br/>Brython運作<br/>Brython 使我們能夠通過將Python代碼轉換為JavaScript在瀏覽器中編寫和運行Python代碼。這段代碼將能在所有支援JavaScript的瀏覽器中運行，因為Brython故意避免使用新的、不受支援的語法生成JavaScript。<br/>可將轉譯視為編譯子集。<br/>編譯過程通常用高級程式設計語言（例如C）編寫的原始程式碼轉換為較低級別的語言（例如機器代碼）。<br/>轉譯是將高級語言轉換為另一種高級語言（例如Python到JavaScript）。<br/><br/>Brython中的轉譯發生在載入HTML頁面的同時。用HTML文件標籤中的函數：brython()body<br/>&lt;body onload="brython()"&gt;<br/>該函數執行寫在HTML文件標籤中的Python代碼的轉譯。所有Python代碼須用標籤括起來：brython()&lt;script type="text/python"&gt; &lt;script type="text/python"&gt;<br/>&lt;script type="text/python"&gt;<br/> &lt;!-- Python code --&gt;<br/>&lt;/script&gt;<br/>或者，使用以下命令將其載入到HTML文件中來包含外部Python代碼：<br/>&lt;script type="text/python" src="test.py"&gt;&lt;/script&gt;<br/>所有Web瀏覽器都支援JavaScript作為主要語言，但不支援Python。因此，所有 Python 代碼都需轉換為 JavaScript，然後在載入 HTML 頁面所需的時間內運行。<br/>該函數通過檢查所有具有 of 類型的腳本來搜索 HTML 頁面中的所有 Python 代碼，然後將所有代碼轉換為 JavaScript：brython()text/python<br/>此轉換的結果是 JavaScript 代碼的簡單字串表示。該字串必須在瀏覽器中作為 JavaScript 代碼運行。<br/>Brython 使用 JavaScriptfunction 來運行所有翻譯後的代碼。它可以使用 JavaScript 命令在某些瀏覽器上執行代碼。eval()new Function(function_name, source)(module)<br/>這不是運行 JavaScript 的首選方式。可能是危險的，因為它可能會將應用程式暴露給潛在的惡意第三方代碼。與替代方案相比，速度慢。eval()eval()<br/>如果 Python 代碼通過 HTML 文件載入，Brython 將執行 Ajax 調用以獲取載入檔的內容。該代碼被轉換為JavaScript，並以與上述相同的方式執行。&lt;script type="text/python" src="url"&gt;<br/><br/>與Brython合作 - 示例<br/>回顧幾個例子，以便瞭解 Brython 的工作原理及功能：<br/>世界您好<br/>&lt;html&gt;<br/> &lt;head&gt;<br/> &lt;script src="/brython.js"&gt;&lt;/script&gt;<br/> &lt;/head&gt;<br/> &lt;body onload="brython()"&gt;<br/> &lt;script type="text/python"&gt;<br/> import browser<br/> browser.document &lt;= "Hello world!"<br/> &lt;/script&gt;<br/> &lt;/body&gt;<br/>&lt;/html&gt;<br/>我們將專注於標籤之間的 Python 代碼：&lt;script type="text/python"&gt;&lt;/script&gt;<br/><br/>import browser將包載入到腳本中。它是將所有Brython特定的名稱和模組分組的包，主要用於表示JavaScript中使用的DOM元素和事件。browser<br/>browser.document是表示當前顯示的 HTML 文件的物件。<br/>browser.document &lt;= "Hello world!"- 我們使用符號而不是“接收”包含字串的新元素。另一種方法是使用以下語法：&lt;==documentHello world!browser.document.attach("Hello world!")<br/>在用戶端，一旦呈現此代碼 - 它會導致：<br/>&lt;html&gt;<br/> &lt;head&gt;<br/> &lt;script src="/brython.js"&gt;&lt;/script&gt;<br/> &lt;/head&gt;<br/> &lt;body onload="brython()"&gt;<br/> Hello world!<br/> &lt;/body&gt;<br/>&lt;/html&gt;<br/>添加元素和屬性<br/>修改示例，並添加一些段落和文本格式。該介面提供了模組，它公開了 HTML 標籤，可以用這些標籤從 Python 代碼動態創建 HTML 結構。建立物件的語法為：browserhtml<br/>browser.html.TAG("content", [attributes])<br/><br/>哪些輸出：<br/>&lt;TAG [attributes]&gt;content&lt;/TAG&gt;<br/>browser.html.H2("Hello world!")用標籤包裝字串。Hello world&lt;h2&gt;<br/>browser.html.A("link", href="stackabuse.com")創建安塔格。&lt;a href="stackabuse.com"&gt;<br/>可以進行嵌套，只需在另一個元素中包含 an即可。讓我們在頁面中添加一些元素：html.element<br/>&lt;html&gt;<br/> &lt;head&gt;<br/> &lt;script src="/brython.js"&gt;&lt;/script&gt;<br/> &lt;/head&gt;<br/> &lt;body onload="brython()"&gt;<br/> &lt;script type="text/python"&gt;<br/> import browser<br/> <br/> title = browser.html.H2("Hello world!")<br/><br/> bold = browser.html.B("bold text")<br/> url = browser.html.A("link", href="stackabuse.com")<br/> paragraph = browser.html.P("This is a paragraph. This is " + bold + ", and this is a " + url)<br/><br/> browser.document &lt;= title<br/> browser.document &lt;= paragraph <br/> &lt;/script&gt;<br/> &lt;/body&gt;<br/>&lt;/html&gt;<br/>可以創建沒有參數的物件並構建它，而不是使用這樣的參數創建物件： url = browser.html.A("link", href="stackabuse.com")<br/><br/># Creating an &lt;a&gt;&lt;/a&gt; tag<br/>url = browser.html.A()<br/><br/># Adding content between created tags<br/># &lt;a&gt;Url Text&lt;/a&gt;<br/>url &lt;= "Url Text"<br/># Adding href attribute<br/># &lt;a href="stackabuse.com"&gt;Url Text&lt;/a&gt;<br/>url.href = "stackabuse.com"<br/>完成 Python 代碼並打開頁面時 - 生成的 HTML 頁面應如下所示：<br/><br/>&lt;html&gt;<br/> &lt;head&gt;<br/> &lt;script src="/brython.js"&gt;&lt;/script&gt;<br/> &lt;/head&gt;<br/> &lt;body onload="brython()"&gt;<br/> &lt;h2&gt;Hello world!&lt;/h2&gt;<br/> &lt;p&gt;<br/> This is a paragraph. This is &lt;b&gt;bold text&lt;/b&gt;, and this is a <br/> &lt;a href="stackabuse.com"&gt;link&lt;/a&gt;.<br/> &lt;/p&gt;<br/> &lt;/body&gt;<br/>&lt;/html&gt;<br/>我們有aelement，在其中我們使用aandelement，事先構建。&lt;p&gt;&lt;b&gt;&lt;a&gt;<br/><br/>使用 Brython 建立表<br/>可以用一直應用的大致相同的邏輯創建表：table = browser.html.TABLE()<br/>創建幾行包含一些模擬資料並將它們添加到：table<br/><br/># Creating the row<br/>row = browser.html.TR()<br/># Adding header cells<br/>row &lt;= browser.html.TH("Header1")<br/>row &lt;= browser.html.TH("Header2")<br/># Appending the row to the table<br/>table &lt;= row<br/><br/># Adding a first row<br/>row = browser.html.TR()<br/>row &lt;= browser.html.TD("Data 1")<br/>row &lt;= browser.html.TD("Data 2")<br/>table &lt;= row<br/>最後選擇在 HTML 頁面上創建的 bankelement 中顯示表：&lt;div id="table-zone"&gt;<br/><br/>tableZone = browser.document["table-zone"] <br/>tableZone &lt;= table<br/>導致我們頁面上的 HTML 表格：<br/><br/>&lt;div id="table-zone"&gt;<br/> &lt;table&gt;<br/> &lt;thead&gt;<br/> &lt;tr&gt;<br/> &lt;th&gt;Header 1&lt;/th&gt;<br/> &lt;th&gt;Header 2&lt;/th&gt;<br/> &lt;/tr&gt;<br/> &lt;/thead&gt;<br/> &lt;tbody&gt;<br/> &lt;tr&gt;<br/> &lt;td&gt;Data 1&lt;/td&gt;<br/> &lt;td&gt;Data 2&lt;/td&gt;<br/> &lt;/tr&gt;<br/> &lt;/tbody&gt;<br/> &lt;/table&gt;<br/>&lt;/div&gt;<br/>向現有元素添加樣式<br/>為元素添加一些樣式：&lt;div id="table-zone"&gt;table<br/><br/>tableZone.style = {<br/> "background-color": "#dedfdd",<br/> "width": "50%",<br/> "min-height": "100px",<br/> "margin": "auto"<br/> }<br/> <br/>table.style = {<br/> "border": "1px solid #333",<br/> "margin": "auto"<br/> }<br/>這將導致修改的 HTML 標記，並添加屬性：style<br/><br/>&lt;div id="table-zone" style="background-color: rgb(222, 223, 221); width: 50%; min-height: 100px; margin: auto;"&gt;<br/> <br/>&lt;table style="border: 1px solid rgb(51, 51, 51); margin: auto;"&gt;<br/>綁定操作和從元素讀取內容<br/>網頁可用於顯示數據和捕獲數據。表單是提示使用者發送數據的方式之一。<br/>在Brython中創建一個表單，使用函數和HTML元素，如and：FORM()INPUT()LABEL()<br/><br/># Create a &lt;div id="form-div"&gt; element as a container for a new form<br/>formDiv = browser.html.DIV(id="form-div")<br/># Create a &lt;form&gt; element <br/>form = browser.html.FORM()<br/><br/># Create the &lt;input type="text"&gt; field wit the label and add it to the form<br/>input = browser.html.INPUT()<br/>input.type = "text"<br/>input.id = "input-name"<br/># Add label and to the form<br/>form &lt;= browser.html.LABEL("Enter your name: ") + input<br/><br/># Create the submit button and add it to the form<br/>button = browser.html.INPUT()<br/>button.type = "button"<br/>button.value = "Submit"<br/>button.id = "submit-button"<br/>form &lt;= button<br/><br/># Add form to the container &lt;div&gt; element<br/>formDiv &lt;= form<br/># Add the &lt;h4 id="form-response"&gt; to show the value from the form<br/>formDiv &lt;= browser.html.H4("Your name is: ", id="form-response")<br/># Display the div element containing form on the page<br/>browser.document &lt;= formDiv<br/>不執行任何操作的表單不是很有用。在 Brython 中使用自定義函數。創建一個名為 uponing the button 的 Python 函數。它將提醒使用者按鈕已被按下並更新元素的值：clicksubmit&lt;h4 id="form-response"&gt;<br/><br/>def onSubmit(ev):<br/> # Get the value of the &lt;input id="input-name"&gt; field<br/> name = browser.document["input-name"].value<br/> # Append the stored value to the content in the &lt;h4 id="form-response"&gt; tag<br/> browser.document["form-response"] &lt;= name<br/> # Alert the user that the button has been clicked<br/> browser.alert("The Submit Button is Clicked") <br/>將事件與創建的函數綁定，以便在按下按鈕時獲得所需的行為：clicksubmit-buttononSubmit()<br/><br/>browser.document["submit-button"].bind("click", onSubmit)<br/><br/>Brython與替代品相比<br/>除了Brython之外，還有其他決方案可以在Web瀏覽器中運行Python代碼<br/><br/>系統 編譯時間 運行機制<br/>布萊頓 頁面載入時 將 Python 轉換為 JavaScript<br/>轉譯 超前 將 Python 轉換為 JavaScript<br/>巴達維亞 超前 瀏覽器中的 Python 運行時<br/>斯庫爾普特 頁面載入後 將 Python 轉換為 JavaScript<br/>派皮.js 頁面載入後 瀏覽器中的 Python 運行時<br/>吡啶 頁面載入後 瀏覽器中的 Python 運行時<br/>其中一些傾向於完全取代JavaScript，另一些只是為Web瀏覽器創建一個有用的Python環境，作為JavaScript的可能替代品。一些解決方案正在將Python代碼轉換為JavaScript，如Brython，Skulpt和Transcrypt。<br/>就編譯時間而言，它是在載入 HTML 文件之前、之後或載入時執行的。<br/>Python代碼執行速度進行基準測試時，Brython處於更快的一端。提前將 Python 編譯（轉譯）為 JavaScript 的解決方案與包含翻譯代碼的大檔之間進行折衷，客戶端必須（向下）載入這些檔才能以“提前”方法運行腳本。<br/><br/>Brytho非常接近那個甜蜜點。<br/>基準測試顯然不能總是代表現實世界的情況，因為結果可能因執行的代碼而異，但它們可以在不同解決方案的性能之間提供很好的比較。<br/><br/>注意：Brython 比只對相同的代碼使用 JavaScript 慢。因為增加了轉譯步驟，它不會完全是0ms，之後運行JavaScript代碼。<br/><br/>結論<br/>如果你正在尋找JavaScript作為Web腳本語言的替代品，並且不太關心性能，那麼Brython可能是一個很好的解決方案。<br/>它在執行速度和載入庫所需的多餘記憶體使用之間不可避免的權衡的平衡方法使其成為在瀏覽器中運行 Python 的最佳性能解決方案之一。<br/><br/>Brython沒有龐大的社區和廣泛地使用。學習資源有限，局限於官方文檔，而沒有大型專案可以尋求指導。<br/><br/>是否值得取代JavaScript。即使是小規模的 Brython 專案，與用 JavaScript 編寫的完全相同的專案相比，執行速度也會慢 2 倍。JavaScript擁有龐大的開發人員社區，大量資源和現實世界的專案<br/><br/>JavaScript框架，是JavaScript流行的支柱。如果沒有他們的説明，JavaScript 只是另一種腳本語言，它為我們提供了動態更改靜態 HTML 頁面內容的能力。例如純JavaScript編寫複雜的伺服器端邏輯。即使可行，也不會是一次愉快的經歷。<br/><br/>Brython沒有為它開發的框架，只能使用純Python代碼，這對於簡單的用例之外的任何事情都是不合理的。無法像使用 JavaScript 和 Angular 那樣使用 Brython 創建一些複雜的單頁 Web 應用程式。對於只想使用Python進行伺服器端和用戶端程式設計來說，Brython是一個很好的工具，但還無法取代JavaScript</div>
<div></div>
<p></p>
<h1>hw</h1>
<h2>w10</h2>
<p>心得:</p>
<p><span>w10 將a班缺考人員程式和a班考試成績程式結合，這次的作業相對簡單，只要將老師給的2個程式並在一起在稍加修改即可，但這次缺考和考0分都顯示0分所以讓我意識到其實如果上課還繼續玩手機看漫畫回家還不看老師錄製的影片，考試時才到該影片或該週內容查看的話其實頂多答2-3題時間就到了而且該題要得到分數的話該題的所有小題都要答對。</span></p>
<h3>HW1</h3>
<div><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/4b9c778c87c5a4d7cd585da5fbba737e/raw/3a0260a69e74726d4584b4b36752e053a7d1386b/HW10-1-1"> 1a缺考人員學號</a></div>
<p><button id="add1to100"><span>1a缺考人員學號</span></button></p>
<p></p>
<p><span><!-- 導入 brython 程式庫 --></span></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><span><!-- 啟動 Brython --></span></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/40923118/4b9c778c87c5a4d7cd585da5fbba737e/raw/3a0260a69e74726d4584b4b36752e053a7d1386b/HW10-1-1"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><span><!-- editor1 開始 --></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p></p>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<div><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/4b9c778c87c5a4d7cd585da5fbba737e/raw/3a0260a69e74726d4584b4b36752e053a7d1386b/HW10-1-2">若缺考者得分為0分,則1a人員學號和本次考試成績:</a></div>
<p></p>
<p><button id="add1to100part2"> <span>學號</span><span>和成績</span></button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/40923118/4b9c778c87c5a4d7cd585da5fbba737e/raw/edf4932ba7f0eb0b119f619c187c22d4372d1d78/HW10-1-2"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><span><!-- editor2 開始 --></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p></p>
<!-- editor2 結束 -->
<p><span><!-- editor2 結束 --></span></p>
<hr/>
<p><span>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</span></p>
<h3>HW2</h3>
<p>列出1,3,5,7,9</p>
<p><button id="列出1,3,5,7,9,">列出1,3,5,7,9</button></p>
<p><span><!-- 導入 brython 程式庫 --></span></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><span><!-- 啟動 Brython --></span></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/40923118/4b9c778c87c5a4d7cd585da5fbba737e/raw/edf4932ba7f0eb0b119f619c187c22d4372d1d78/HW10-2"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- list_1a_static_site.py+random_draw_1a -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )


# 從 gist 取得程式碼
add_src = open(list_1a_static_site.py+random_draw_1a).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "list_1a_static_site.py+random_draw_1a" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- list_1a_static_site.py+random_draw_1a結束--></p>
<p><span><!-- editor1 開始 --></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><span><!-- editor1 結束 --></span></p>
<div style="width: 100%; height: 100%;"></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p><span><!-- editor2 結束 --></span></p>
<hr/>
<h2>w12</h2>
<p>1.溫度轉換公式 <br/>    f = c*9/5 + 32<br/>    c = (f-32)*5/9</p>
<p></p>
<p>4.</p>
<!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
-->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
</script>
<!-- 以下事先在頁面中加入 id="brython_div" 的 div 標註
之後可利用 Brython 的 document 模組與此 html 標註對應
--></p>
<!-- 利用 html 建立一個 id="btn1" 的按鈕 -->
<p><button id="btn1">取使用者輸入</button></p>
<div id="brython_div"></div>
<p>
<script type="text/python">
from browser import html, document
# Brython 的 input() 可以接受輸入提示字串, 跳出瀏覽器輸入表單後, 將輸入內容以字串取回
#user_input_temp = input("請輸入攝氏溫度值:")
# 接著列出 user_input_temp 變數的資料型別
# 但是在頁面中 Brython 的 print() 將會顯示在 log 而非頁面
#print(type(user_input_temp))
# 這裡定義一個 brython_div 變數, 透過 document[] 與頁面中 id="brython_div" 的位置對應
brython_div = document["brython_div"]
# 看能不能直接將變數值字串列在標註 id 為 "brython_div" 的頁面位置
#brython_div <= user_input_temp
# 之後若要列出 html, 則需要透過 Brython 的 html 模組
# 接下來要設法按下按鈕之後才執行取使用者 input 的流程
# 首先 comment 掉前面的 input() 與 print(), 同時蓋掉輸出, 並利用事件導向設計一個函式
def get_input(c):
    user_input_temp = input("請輸入攝氏溫度值:")
    brython_div <= user_input_temp
# 透過 Brython browser 模組中的 document 物件將 id="btn1" 的物件中的 bind() 方法
# 讓使用者 click 後會經由瀏覽器中的 event 通知執行 get_input 函式
document["btn1"].bind('click', get_input)
</script>
</p>
<h2>w13</h2>
<div>
<pre><span class="cm-line"><span class="cm-string">f = c*9/5 + 32</span>
</span><span class="cm-line"><span class="cm-string">c = (f-32)*5/9<br/><br/></span></span>溫度轉換成是範例1<br/><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/36d01af56f8ea7c33d020c40f3f991f9/raw/7e403bd4e865aec53327f22e44b475879d048f65/w13_temp_ex1.py">ex1</a><br/><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src2=https://gist.githubusercontent.com/40923118/36d01af56f8ea7c33d020c40f3f991f9/raw/b6cd4203e167167eb3e477f72569b4c053559827/w13_temp_ex2.py">ex2</a><br/><br/>心得: <br/>這週老師在上課時親自示範溫度轉換程式，雖然跟著做了，但是在w17時老師問了很多同學該如何寫1+到10/<br/>1+到100或是該如何利用溫度轉換程式改寫為英吋和公分轉換，當時聽到老師在問其他同學這個問題我自己發<br/>現雖然知道那是一樣的東西但是我也寫不出來，還好後來老師有示範，看完影片後才了解到開如何寫(任何)有<br/>關單位轉化的程式(此心得於w17補上)</pre>
</div>
<h2>w14</h2>
<!-- 
在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑
-->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','/downloads/py/']});
}
</script>
</p>
<p>心得:</p>
<p>這週的作業只要將w10的作業複製並將w10考試結果網址換成w14的即可完成。</p>
<div>
<div><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/84fa382535fef56df31c9adacf5aef42/raw/0deafbd57eeabc52da8519b565e0db45749682ea/cp2022_w14">w14缺考人員名單</a></div>
<div></div>
</div>
<h2>w15</h2>
<p>心得:</p>
<p></p>
<p>w15 利用視覺暫留(透過html5 canvas) 做出動畫 經過反覆使用#(單行註解)嘗試寫程式後發現才原程式(h&gt;=&lt;n)為綠色格子重頭走到尾(ex右上到左上)，而(s 1:)是指每次走一格，剛開始還不了解程式，以為只要將s 1:改成s 1/2:綠色格子就能走到第8格(中間)後依照後面程式轉向，結果實際情況是移動速度變慢還脫出一排白色腳印，一直到後來詢問同學後才發現。完成這次作業後讓我對寫程式有更深的了解，和學習自己註解程式(使用#解釋該程式的意思或如何作用)的重要性。</p>
<p>doc透過id 在超文件中找到位置，並取出<span>canvas中的2d分支(canvas.getcontext)</span></p>
<p><span>                                                   canvas中的3d分支(webgl)</span></p>
<p>1.為何學習計算機程式需要建立個人倉儲?</p>
<p>    不但能建立網站，而且也能了解當前的版本和改版過程資訊，且之後會有協同相關課程，沒有個人的倉儲就無法與他人進行協同</p>
<p>2.全球資訊網能夠提供甚麼功能或有什麼優點?</p>
<p>    能將圖片和連結塞入網頁中，還能將文字、檔案，超文件格式化</p>
<p>3.Replit, stud.cycu.org 與 localhost 分別代表甚麼?</p>
<p>    分別代表3種維護倉儲的方法</p>
<p>    Replit : 別人寫的程式</p>
<p>    stud.cycu.org : 自己寫的程式</p>
<p>    localhost : 是一個在電腦網路中用於表示「此電腦」的主機名。它被用於通過本地環回網路介面，來存取本機執行的服務，並且將會繞過任何物理網路介面硬體。</p>
<p>4.https, ssh 到底提供使用者那些功能或優點?</p>
<p>    HTTP 全名是 超文本傳輸協定，內容只規範了客戶端請求與伺服器回應的標準，實際上是藉由 TCP 作為資料的傳輸方式。</p>
<p>    SSH（Secure Shell，安全外殼）是一種網路安全協定，通過加密和認證機制實現安全的訪問和檔傳輸等業務。傳統遠端登錄或檔傳輸方式，例如Telnet、FTP，使用明文傳輸數據，存在很多的安全隱患。隨著人們對網路安全的重視，這些方式已經慢慢不被接受。SSH協議通過對網路數據進行加密和驗證，在不安全的網路環境中提供了安全的登錄和其他安全網路服務。作為Telnet和其他不安全的遠端shell協定的安全替代方案，目前SSH協議已經被全世界廣泛使用，大多數設備都支援SSH功能。</p>
<p>5.Brython 與 Python 有甚麼差別?</p>
<p>    因javascript書寫的程式太過鬆散，可使用typescript，但Brython比typescript簡單，且目前使用Brython就夠了</p>
<p>    Brython : 在瀏覽器用 Python 取代 JavaScript</p>
<p>    Python : 簡潔有力、便於閱讀、是一種學習門低、程式碼簡潔、功能多且有完整的標準程式庫模組還能支援多種編寫方式，包括物件導向、命令式、函數式、程序式，但Python 執行速度較慢且Python的強制縮排，單行語句在結尾不寫分號所以一行就只能有一條語句，在剛開始使用時會不太適應</p>
<p>6.能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼?</p>
<p>    代表程式正確無誤</p>
<p>7.變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼?</p>
<p>    變數 : 一個已知或未知數值或資訊的儲存位址，以及相對應之符號名稱。</p>
<p>    字串 : 是由n個字元組成的有限序列</p>
<p>    整數 : 沒有小數點或分數的數字ex1、2、3...</p>
<p>    浮點數 : 對於實數近似值數值的表現法，由尾數加上冪數來表示，通常是乘以某個基數的整數次指數得到。以這種表示法表示的數值</p>
<p>    數列 : 一列數字</p>
<p>    Tuple : 存資料的「容器」，可以將物件存入，變成有順序的序列結構</p>
<p>    Dictionary : 字典的意思，可用來查詢看懂的單字(詞))</p>
<p>    函式 : 把常用的程式碼包裝在一個區塊中，方便我們在寫程式時隨時呼叫、使用</p>
<p>    重複迴圈 : 重覆執行程式</p>
<p>    class : 教室的意思</p>
<p>    物件導向 : 把大部分程式內的東西都變成以物件的方式呈現</p>
<p>    資料庫 : 儲存資料的地方</p>
<p></p>
<p></p>
<p>修改以下程式</p>
<p><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/7e44ce6fe7fadeab7f112546f0c852da/raw/88fc160b6dd5450f2acb7bf540dda17f995d44ff/HW15">原程式</a></p>
<p><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/7e44ce6fe7fadeab7f112546f0c852da/raw/80e7a1261e2fe8c77bb7b6663c37c531cac4435c/After%2520the%2520update">更新後</a></p>
<h2>w16</h2>
<p>心得:</p>
<p>這週作業比較簡單，只要在w15的程式裡面加入按鈕即可，但是因為當時網也出現衝突所以這次作業到w17才做完。(解決衝突的方法寫在w17)</p>
<p><a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/b31ff1db41b60bc97de50c374b97043f/raw/d4e167a8a72f120353d006361616f682dee62a1e/HW16">在w15作業中加入啟動和暫停按鈕</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註 
# 設為與 brython_div 變數對應
brython_div = doc["brython_div1"]

# 建立 buttons
brython_div &lt;= html.BUTTON("啟動", id="power")
brython_div &lt;= html.BR()

# 將 canvas 標註放入 brython_div1 所在位置
# 頁面中原本就已經放入 &lt;div id="brython_div"&gt;&lt;/div&gt; 標註
brython_div &lt;= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")

# 建立畫直線函式
def draw_line(x1, y1, x2, y2, color="#ff0000"):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.stroke()

# 建立 write Text 函式
def wText(x, y, t, s=14, c='#0000ff'):
    ctx.font = str(s) + "px Arial";
    ctx.fillText(t, x, y)

# 定義畫格線的函式
def grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):
    # 利用迴圈與座標增量繪圖
    # 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1
    for i in range(wnum+1):
        for j in range(hnum+1):
            # 畫上下直線
            yend = starty + h*(hnum)
            xend = startx + w*(wnum)
            x = startx + i*w
            draw_line(x, starty, x, yend, color)
            # 畫左右直線
            y = starty + j*h
            draw_line(startx, y, xend, y, color)
            #wText(w/2-10, y-w/2, str(j))

# 從兩個座標點求中心點座標
def center(lx, ly, rx, ry):
    # lx is x coord of the left up corner
    # rx is the x coord of th right down corner
    x = (lx + rx)/2
    y = (ly + ry)/2
    return x, y
    
# 畫出填色方塊
def draw_rect(gx, gy, gw, gh, color="lime"):
    # gx is the grid coord at x direction
    # gy is the grid coord at y direction
    # gw is the with of the green rect
    # gh is the height of the green rect
    lx = origx + (gx-1)*w
    ly = origy + (gy-1)*h
    rx = origx + gx*w
    ry = origy + gy*h
    cx, cy = center(lx, ly, rx, ry)
    # glx is the x coord of the left corner
    # gly is the y coord of the left corner
    glx = cx - gw/2
    gly = cy - gh/2
    # 利用設定的顏色值畫出 rectangle
    ctx.fillStyle = color
    ctx.fillRect(glx, gly, gw, gh)

# 以白色覆蓋位於 (nowx, nowy) 
# 且比目標方塊長寬各大於 1 pixel的方塊
def wipe():
    draw_rect(nowx, nowy, 30+1, 30+1, color="white")

# 畫出位於 (nowx, nowy) 的綠色方塊
def draw():
    draw_rect(nowx, nowy, 30, 30, color="lime")

# 更新後
def walk():
    global stepx, stepy
# x軸向右為正，y軸向下為正
# 當綠色方塊位於(1.1)時，x方向增量值為1，即向右移動
    if nowy ==1 and nowx == 1:
        stepx = 1
        stepy = 0
# 當綠色方塊走到(8.1)時，y方向增量值為1，即向下移動
    elif nowx == 8 and nowy == 1:
        stepx = 0
        stepy = 1
# 當綠色方塊走到(8.15)時，x方向增量值為1，即向右移動
    if nowx ==8 and nowy == 15:
        stepx = 1
        stepy = 0
# 當綠色方塊走到(15.15)時，y方向增量值為-1，即向上移動
    elif nowy == 15 and nowx == 15:
        stepx = 0
        stepy = -1
# 當綠色方塊走到(15.8)時，x方向增量值為-1，即向左移動
    if nowy == 8 and nowx == 15:
        stepx = -1
        stepy = 0
# 當綠色方塊走到(1.8)時，y方向增量值為-1，即向上移動
    elif nowx == 1 and nowy == 8:
        stepx = 0
        stepy = -1
# 每隔短暫時間即呼叫執行一次的函式
def game():
    # 因 nowx 與 nowy 在函式外宣告
    # 且在函式內改變對應值, 因此需宣告為 global
    global nowx, nowy
    walk()
    wipe()
    nowx += stepx
    nowy += stepy
    draw()
    
    # 將 anim 設為 None
anim = None
 
def launchAnimation(ev):
    global anim
    # 初始啟動, anim 為 None
    if anim is None:
        # 每 0.08 秒執行一次 draw 函式繪圖
        #anim = timer.set_interval(draw, 80)
        anim = browser.timer.set_interval(game, 100)
        # 初始啟動後, 按鈕文字轉為"暫停"
        doc['power'].text = '暫停'
    elif anim == 'hold':
        # 當 anim 為 'hold' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"
        #anim = timer.set_interval(draw, 80)
        anim = browser.timer.set_interval(game, 100)
        doc['power'].text = '暫停'
    else:
        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停
        # 且將 anim 變數設為 'hold', 且 power 文字轉為"繼續"
        #timer.clear_interval(anim)
        browser.timer.clear_interval(anim)
        anim = 'hold'
        doc['power'].text = '繼續'

# 綠色方塊起點座標與 x 及 y 方向的座標增量
nowx = 1
nowy = 1
stepx = 0
stepy = 0
# 設定格數
# width 方向格子數
wnum = 15
# height 方向格子數
hnum = 15
# 設定線寬
pixel = 1
# 設定 w 寬度
w = int(canvas.width/wnum) - pixel
# 設定 h 高度
h = int(canvas.height/hnum) - pixel
# 設定繪圖座標點起點位置
origx = 1
origy = 1
# 利用 grid 函式畫出格線
grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")
doc["power"].bind("click", launchAnimation)</pre>
<p></p>
<h2>w17</h2>
<p>練習寫程式</p>
<p>1.<a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/22aa2e896f4fd2d6b4aad918ce93d32b/raw/f24c8c289c8e1731d09c29ee655a979c099d7157/%25E7%25B7%25B4%25E7%25BF%2592%25E5%25AF%25AB%25E7%25A8%258B%25E5%25BC%258F">test</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#利用def定義函式，函式名稱為test，此函式有start和edn2個變數
def test(start,end):
#從零開始
    a = 0
#定義出i值範圍，其初始值為start，最大值為end+1(若只寫end則程式運算時不換超過end的值(&lt;end)，寫end+1時此程式會運算到第10行定義的end值)，每次增量為2
    for i in range(start,end+1,2):
        a = a + i
#利用str將浮點、整數轉為字串(int則可將字串、浮點轉為整數)
    print("從" + str(start) + "加到" + str(end) + "的奇數等於" + str(a))
#列出自訂的函式名稱和對應的變數程式即可運算
test(1,10)
'''
#利用def定義函式，函式名稱為kg，設定變數a
def kg(a):
#單位轉換公式
    g = a*1000
#利用str將整數轉為字串
    print(str(a) + "公斤" + "等於" + str(g) + "公克")
#給定變數值及可轉換單位
kg(10)
'''</pre>
<p>2.<a href="https://mdecp2022.github.io/site-40923118/content/Brython.html?src=https://gist.githubusercontent.com/40923118/22aa2e896f4fd2d6b4aad918ce93d32b/raw/300e4b4d0539f2c8e9b67dc7cc511e2891832f60/python%25E9%2597%259C%25E9%258D%25B5%25E5%25AD%2597">列出關鍵字</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import keyword
print(keyword.kwlist)
'''
'''</pre>
<p>以下為python關鍵字</p>
<p>['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</p>
<p>心得(解決衝突):</p>
<p>在上週我在進入要<strong>https://127.0.0.1:9443/</strong>時發現突然無法登入了，反而顯示了"<em>warning: this is a development server. do not use it in a production deployment. use a production wsgi server instead</em>."，當時想說因該是因為我當時隨身碟和筆電的版本不同(當時隨身碟版本較新)，只要<strong>git pull</strong>(將遠端的新版本拉下來合併)就可以了，結果系統提示我使用<strong>git push</strong>(當遠端版本較舊時將近端推到遠端已跟新遠端版本)，結果發現打完2個指令還是不能利用cms的指令進入<strong>https://127.0.0.1:9443/</strong>，後來查了一下開如何解決，雖然也有人顯示<span>"</span><span><em>warning: this is a development server. do not use it in a production deployment. use a production wsgi server instead</em>.</span>"但是還是沒辦法解決，這這樣到下課了，到今天我上台和老師講解我這學期做了什麼的時候老師問了我一句:你知道你衝突還沒解決嗎?我才知道原來那個是發生衝突，後來詢問老之，老師幫我下載了一個可以辨別不同處的軟體(在<strong>KDiff3</strong>中匯入<span>content_backup</span>和<span>content_backup</span>後此軟體會自動分析出這2個資料程式碼的不同處-即為衝突點)，後來老師先幫我將有衝突的和沒衝突的都備份了一份，然後利用沒有衝突可以執行的那一份進入https://127.0.0.1:9443/(簡單來說就是將複製的content_backup改成content，並把原本有衝突的content刪除這樣只會剩下content-複製和content_backup和由content_backup改名成的content這時就可以正常進https://127.0.0.1:9443/) 之後告訴我將那份有衝突的資料(<span>content-複製</span>)拉入<strong>Untitled</strong>然後再去改[雖然可以利用Search(收尋)收尋到======(我也不知道為什們是6個等號可能是有衝突的地方就會有巴)然後直接找出衝突並修正，但這樣可能會刪到一些表面上看不到的程式碼，所以我是利用KDiff3找出所有衝突點，再到<strong>Untitled</strong>找到對應位置並進行修正(也不知道可不可以直接複製貼上)，之後才成功解決衝突?(我不知道還有沒有其他衝突)]，最後提醒有看到此文的同學，如果有發生問題，問同學或上網查都可以，但是如果還是不行那就趕快去問老師吧。</p><h2>w18</h2>
<p><span>(1)變數宣告</span></p>
<p>變數訂定規則</p>
<ol>
<li>不可使用 Python 關鍵字作為變數</li>
<li>只能以英文大小寫或 _ (底線) 作為變數開頭</li>
<li>變數名稱分別英文大寫與小寫</li>
</ol>
<p>Python 程式語言的關鍵字:</p>
<div id="keyword">False,<span> </span>None,<span> </span>True,<span> </span>and,<span> </span>as,<span> </span>assert,<span> </span>async,<span> </span>await,<span> </span>break,<span> </span>class,<span> </span>continue,<span> </span>def,<span> </span>del,<span> </span>elif,<span> </span>else,<span> </span>except,<span> </span>finally,<span> </span>for,<span> </span>from,<span> </span>global,<span> </span>if,<span> </span>import,<span> </span>in,<span> </span>is,<span> </span>lambda,<span> </span>nonlocal,<span> </span>not,<span> </span>or,<span> </span>pass,<span> </span>raise,<span> </span>return,<span> </span>try,<span> </span>while,<span> </span>with,<span> </span>yield,<span> </span>共有 35 個.</div>
<div>
<p>(2)<span>資料型別轉換</span></p>
<p>int(in) 可以將輸入的 in 變數轉為整數 (integer)</p>
<p>float(in) 可以將輸入的 in 變數轉為浮點數 (floating number)</p>
<p>str(in) 可以將輸入的 in 變數轉為字串 (string)</p>
<p></p>
<p>ex.1+2</p>
<div id="add_to_9">蘋果10$和一列1-10的奇數</div>
</div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 使用 apple 作為變數名稱, 並與整數 10 對應
apple = 10
# 在前後加上文字/符號(蘋果/$)時印出 蘋果10$
print("蘋果" + str(apple) + "$")
 
# for 迴圈所使用的 index 變數 i 無需在迴圈之前進行宣告.
# 以下程式會印出 1到10的奇數 等五個整數.
for i in range(1,10,2):
    print(i)</pre>
<p>(3)<span>資料的基本運算</span></p>
<p>資料包含 integer, floating number 與 string</p>
<p>整數與浮點數可以進行加、減、乘與除運算.</p>
<p>字串則可進行加與乘運算.</p>
<p>ex.3</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 以下可以利用 for 重複迴圈進行整數累加
# 先設定累加總和變數為 sum
# 一開始尚未進行整數累加, sum 的對應值為 0，end 的對應值為10
sum = 0
end = 10
# 接著利用 for 迴圈以增量2產生希望進入累加的整數
for i in range(1, end+1,2):
    # 假設從 1 要累加到 10, 的奇數
    sum = sum + i
    # 當迴圈逐一產生增量後的 i 整數後, 分別與當時的 sum 對應值累加
# 當 i 增加到 10 時, 程式的執行就會跳出 for 環圈, 這時就可以印出累加後的總整數值
print("從 1 加到  10的奇數: " + str(sum))</pre>
<p>(4)<span>函式定義與呼叫</span></p>
<p>def 為 define 的縮寫, 在 Python 程式語法, 可以利用 def 定義函式.</p>
<p>ex.4(w17的test)</p>
<div id="add_to_9">從 1 加到 10 的奇數等於: 25</div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#利用def定義函式，函式名稱為test，此函式有start和edn2個變數
def test(start,end):
#從零開始
    a = 0
#定義出i值範圍，其初始值為start，最大值為end+1(若只寫end則程式運算時不換超過end的值(&lt;end)，寫end+1時此程式會運算到第10行定義的end值)，每次增量為2
    for i in range(start,end+1,2):
        a = a + i
#利用str將浮點、整數轉為字串(int則可將字串、浮點轉為整數)
    print("從" + str(start) + "加到" + str(end) + "的奇數等於" + str(a))
#列出自訂的函式名稱和對應的變數程式即可運算
test(1,10)</pre>
<p>(5)<span>從 Gist 讀取資料</span></p>
<p><span>ex.5 (w16作業-將w15走8字形的綠色方塊加入按鈕)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 將 Brython 程式存入 Gist, 並取得其 url 網址
url = "https://gist.githubusercontent.com/40923118/b31ff1db41b60bc97de50c374b97043f/raw/d4e167a8a72f120353d006361616f682dee62a1e/HW16"
# 利用 open() 與 read() 取得程式碼
data = open(url).read()
# 利用 exec() 執行
ns = {'__name__':'__main__'}
exec(data, ns)</pre>
<p>(6)<span>數列應用</span></p>
<p>以下程式顯示希望這門課能及格不用再重修人員名單</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 已知 cp2022 1a 修課學員學號, 可以輾轉從下列 url 取出
url = "https://nfu.cycu.org/?semester=1111&amp;courseno=0747&amp;column=True"
data = open(url).read()
# 上列 data 為學員學號分別以跳行符號各自列成一列
# 以下利用跳行符號對 data 進行分割, 可以得到型別為 list 的 data 豎列
data = data.split("\n")
# 但取回的資料最後一筆為空白行, 因此數列最後一個元素必須去除
# 冒號前面沒有索引值, 表示從數列的第一個元素開始取用
# 冒號後面加上 -1, 表示數列的取值, 只取到倒數第一位的前一個元素, 也就可以去除最後一個空白元素
data = data[:-1]
print(data)</pre>
<p>(7)<span>字典應用</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">stud_1a_url = "https://mde.tw/studlist/2022fall/1a.txt"
data = open(stud_1a_url).read()
# 因為資料中的第一個欄位為學號, 而第二個欄位為 Github 帳號, 且各列資料以 \t 隔開, 因此讀取後先以各列的跳行符號分割, 將各學員的資料先放入數列後再逐一取出分割出學號與 Github 帳號對應值
# 先宣告一個空的字典
num_github = {}
data = data.split("\n")
# 因為第一列資料為標題, 必須利用 data[1:] 表示從索引值第二位開始取用
# 而且最後一筆為空資料, 也必須去除, 因此最後只取用 data[1:-1]
for i in data[1:-1]:
    each_stud = i.split("\t")
    stud_num = each_stud[0]
    github = each_stud[1]
    # 逐一以學號作為字典索引, 對應至各學員的 Github 帳號
    num_github[stud_num] = github
 
# 試著利用字典列出 40923118 的 Github 帳號
print(num_github["40923118"])</pre>
<p>(8)<span>Brython 的 Canvas 靜態繪圖</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 畫日本國旗(未依照比例)
# 導入 doc
from browser import document as doc
# 以下將利用 html 產生所需的繪圖畫布
from browser import html
# 利用 math 函式庫執行三角函數運算
import math
canvas = html.CANVAS(width = 600, height = 400)
#canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
# 將圖畫至 id 為 brython_div 的 cnavas 標註
brython_div = doc["brython_div"]
brython_div &lt;= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
# 畫圓
ctx.beginPath()
ctx.arc(300, 200, flag_w/5, 00, math.pi*2, True)
ctx.closePath()
# 將圓填滿紅色
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fill()
#參考老師過國旗的程式(我只有修改22-28)</pre>
<p>(9)<span>Brython 的 Canvas 動態繪圖(w15作業)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註 
# 設為與 brython_div 變數對應
brython_div = doc["brython_div1"]
# 將 canvas 標註放入 brython_div1 所在位置
# 頁面中原本就已經放入 &lt;div id="brython_div"&gt;&lt;/div&gt; 標註
brython_div &lt;= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")

# 建立畫直線函式
def draw_line(x1, y1, x2, y2, color="#ff0000"):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.stroke()

# 建立 write Text 函式
def wText(x, y, t, s=14, c='#0000ff'):
    ctx.font = str(s) + "px Arial";
    ctx.fillText(t, x, y)

# 定義畫格線的函式
def grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):
    # 利用迴圈與座標增量繪圖
    # 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1
    for i in range(wnum+1):
        for j in range(hnum+1):
            # 畫上下直線
            yend = starty + h*(hnum)
            xend = startx + w*(wnum)
            x = startx + i*w
            draw_line(x, starty, x, yend, color)
            # 畫左右直線
            y = starty + j*h
            draw_line(startx, y, xend, y, color)
            #wText(w/2-10, y-w/2, str(j))

# 從兩個座標點求中心點座標
def center(lx, ly, rx, ry):
    # lx is x coord of the left up corner
    # rx is the x coord of th right down corner
    x = (lx + rx)/2
    y = (ly + ry)/2
    return x, y
    
# 畫出填色方塊
def draw_rect(gx, gy, gw, gh, color="lime"):
    # gx is the grid coord at x direction
    # gy is the grid coord at y direction
    # gw is the with of the green rect
    # gh is the height of the green rect
    lx = origx + (gx-1)*w
    ly = origy + (gy-1)*h
    rx = origx + gx*w
    ry = origy + gy*h
    cx, cy = center(lx, ly, rx, ry)
    # glx is the x coord of the left corner
    # gly is the y coord of the left corner
    glx = cx - gw/2
    gly = cy - gh/2
    # 利用設定的顏色值畫出 rectangle
    ctx.fillStyle = color
    ctx.fillRect(glx, gly, gw, gh)

# 以白色覆蓋位於 (nowx, nowy) 
# 且比目標方塊長寬各大於 1 pixel的方塊
def wipe():
    draw_rect(nowx, nowy, 30+1, 30+1, color="white")

# 畫出位於 (nowx, nowy) 的綠色方塊
def draw():
    draw_rect(nowx, nowy, 30, 30, color="lime")

# 更新後
def walk():
    global stepx, stepy
# x軸向右為正，y軸向下為正
# 當綠色方塊位於(1.1)時，x方向增量值為1，即向右移動
    if nowy ==1 and nowx == 1:
        stepx = 1
        stepy = 0
# 當綠色方塊走到(8.1)時，y方向增量值為1，即向下移動
    elif nowx == 8 and nowy == 1:
        stepx = 0
        stepy = 1
# 當綠色方塊走到(8.15)時，x方向增量值為1，即向右移動
    if nowx ==8 and nowy == 15:
        stepx = 1
        stepy = 0
# 當綠色方塊走到(15.15)時，y方向增量值為-1，即向上移動
    elif nowy == 15 and nowx == 15:
        stepx = 0
        stepy = -1
# 當綠色方塊走到(15.8)時，x方向增量值為-1，即向左移動
    if nowy == 8 and nowx == 15:
        stepx = -1
        stepy = 0
# 當綠色方塊走到(1.8)時，y方向增量值為-1，即向上移動
    elif nowx == 1 and nowy == 8:
        stepx = 0
        stepy = -1
# 每隔短暫時間即呼叫執行一次的函式
def game():
    # 因 nowx 與 nowy 在函式外宣告
    # 且在函式內改變對應值, 因此需宣告為 global
    global nowx, nowy
    walk()
    wipe()
    nowx += stepx
    nowy += stepy
    draw()

# 綠色方塊起點座標與 x 及 y 方向的座標增量
nowx = 1
nowy = 1
stepx = 0
stepy = 0
# 設定格數
# width 方向格子數
wnum = 15
# height 方向格子數
hnum = 15
# 設定線寬
pixel = 1
# 設定 w 寬度
w = int(canvas.width/wnum) - pixel
# 設定 h 高度
h = int(canvas.height/hnum) - pixel
# 設定繪圖座標點起點位置
origx = 1
origy = 1
# 利用 grid 函式畫出格線
grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")
browser.timer.set_interval(game, 100)</pre>
<p></p><h1>cp2022</h1>
<p><a href="https://mdecp2022.github.io/site-40923118/content/cp2022.html?src=https://gist.githubusercontent.com/40923118/a28b61ae1a907955e03b464d164e7f03/raw/dc2d7cbfa49a7b02e28ae9b1cd31adfd6fd9bb3f/random_draw_1a.py&amp;
src2=https://gist.githubusercontent.com/40923118/a28b61ae1a907955e03b464d164e7f03/raw/ad87258d056918e4dfe993b2e32f34e66c816c71/list_1a_static_site.py">w6 test</a></p>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p><span><!-- 導入 brython 程式庫 --></span></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><span><!-- 啟動 Brython --></span></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><span><!-- editor1 開始 --></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><span><!-- editor1 結束 --></span></p>
<hr/>
<p><span><!-- ########################################## --></span></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><span><!-- editor2 開始 --></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><span><!-- editor2 結束 --></span></p>
<hr/>
<p><span>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</span></p>
<h1>Brython</h1>
<p>cmsite: wcms use <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> as submodule </p>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p><span><!-- 導入 brython 程式庫 --></span></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><span><!-- 啟動 Brython --></span></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><span><!-- editor1 開始 --></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><span><!-- editor1 結束 --></span></p>
<hr/>
<p><span><!-- ########################################## --></span></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><span><!-- editor2 開始 --></span></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><span><!-- editor2 結束 --></span></p>
<hr/>