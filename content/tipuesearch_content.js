var tipuesearch = {"pages": [{'title': 'About', 'text': 'w5 password_generator \n # 導入亂數模組\nimport random\n# 導入字串模組\nimport string\n# 利用 def 關鍵字定義函式\n# 函式的輸入變數可以設定初始值\ndef password_generator(size=4, chars=string.ascii_lowercase + string.digits):\n    # 函式內以多行註解說明函式功能\n    """Generate random password\n    """\n    # 利用 return 關鍵字將所產生的亂數字串傳回\n    return \'\'.join(random.choice(chars) for _ in range(size))\n# 建立一個變數與隨後的字串對應\npass_string = "abcdefghkmnpqrstuwxyz123456789"\n# 利用重複迴圈呼叫 password_generator() 函式 10 次\nfor i in range(10):\n    print(password_generator(4, pass_string)) \n <<<<<<< HEAD \n cmsite: wcms use  https://github.com/mdecycu/cmsimde  as submodule \n 個人倉儲連結 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'w6', 'text': '心得 \n 雖然上課的時候跟不上老師的進度，不過多看幾次recordings中的影片，至少還做得出來，雖然w6的作業我拖到w14時才完成，但經過反覆瀏覽影片最後我看懂了一些程式所做的指令像是多行註解(""")、單行註解(#)，也知道要如何切割、分頁、如何置入超文件。 \n \n 隨機抽取5位同學的個人網站 \n 隨機抽取5位同學的個人網站 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  list_1a_static_site.py+random_draw_1a  \n \n \n  list_1a_static_site.py+random_draw_1a結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'w6.html'}, {'title': 'Guide to Brython H1', 'text': '請閱讀 此文 並整理文章重點 \n 雖然老師希望我們盡可能的不要使用google翻譯但是內容太多了 \n 以下為重點整理 \n \n Brython介紹 在開發Web時我們會使用多種技術和語言。後端可以用Java（Spring Boot），Python（Django或Flask）或JavaScript（Node.js）構建，前端則常用JavaScript（React，Angular等）完成。有時會用混合方法，讓伺服器端渲染頁面，在前端框架中完成最終的修飾。 近年來JavaScript擴展了原始功能，以支援JavaScript驅動的後端和前端。用JavaScript編寫Web最常見方法是使用MEAN堆疊。一個MongoDB資料庫，Node.js帶有Express.js用於後端，Angular（或React）用於前端。 但如果要使用Python開發你的應用程式呢？雖然嚴格專注於一種程式設計語言是不可取的(語言是工具)，專注於一種工具會讓你不那麼靈活-但單語言應用程式仍有空間。 Brython可能是解決方案！它是JavaScript庫，能在瀏覽器中運行Python代碼。(Brython代表Browser Python) Brython的主要目標是取代JavaScript，並將Python作為Web的主角 本語言，用於您的應用程式： <html>  <head>  <script src="/brython.js"></script>  </head>  <body onload="brython()">  <script type="text/python">  import browser  browser.document <= "Hello world!"  </script>  </body> </html> 通常不支援的類型可以解釋我們編寫的Python代碼。我們列印了Hello World消息，類似JavaScript消息。<script>text/pythonbrowser.documentdocument 在Brython介紹-可了解如何安裝、初始化、設置頁面樣式Brython，並和一些替代方案進行比較 安裝Brython 安裝Brython的最方便的方法可能是不安裝它。如果不需要將其本地安裝到PC上，只需要在靜態網頁上載入即可向頁面添加一些動態功能，則應考慮簡單地導入外部資源。 在HTML頁面的部分載入庫。這樣用戶端將在PC上載入HTML頁面的同時下載庫。 為了實現，我們將從一些託管最新穩定版本的Brython在線的CDN（內容交付網路）載入我們的庫。 內容交付網路是一組託管某些數據（代碼、影片內容、圖像等）的分散式伺服器。這類型的網路很可靠，幾乎沒有停機時間。使它們成為託管代碼庫的理想選擇。 有幾個CDN可供選擇，三個常用： <!-- Option 1 : jsDelivr CDN --> <script src="https://cdn.jsdelivr.net/npm/brython@3.9.1/brython.min.js"></script> <script src="https://cdn.jsdelivr.net/npm/brython@3.9.1/brython_stdlib.js"></script> <!-- Option 2: CloudFlare CDN --> <script src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.9.1/brython.min.js"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/brython/3.9.1/brython_stdlib.min.js"></script> <!-- Option 3: GitHub as the CDN --> <!-- Choose this option if you want to use the latest developement version --> <script src="https://raw.githack.com/brython-dev/brython/master/www/src/brython.js"></script> <script src="https://raw.githack.com/brython-dev/brython/master/www/src/brython_stdlib.js"></script> 通過Pip安裝Brython。 想讓Brython有更靈活性，可以安裝它： $ pip3 install brython pip將在電腦上下載並安裝。 驗證Brython是否成功安裝： $ pip show brython  這將列印出版本，和Brython軟體包的一些基本資訊： Name: brython Version: 3.9.2 Summary: Brython is an implementation of Python 3 running in the browser Home-page: http://brython.info Author: Pierre Quentel Author-email: quentel.pierre@orange.fr License: BSD 初始化Brython專案 安裝Brython後，下一步是創建一個簡單的項目來測試功能。要建立專案，請創建新資料夾並移入其中： $ mkdir brython-project $ cd brython-project 執行以下命令來初始化Brython專案： $ brython-cli --install 建立並初始化Brython專案，包括起始專案目錄和檔案層次結構： brython-project  | brython.js  | brython_stdlib.js  | demo.html  | index.html  | README.md  | unicode.txt 這些檔的用途： brython.js- Brython核心引擎，包括最常用的模組，如果我們選擇不在本地安裝Brython，則使用此標籤將此檔包含在HTML頁面中。browserbrowser.htmljavascript<script> brython_stdlib.js- 由Brython支援的Python標準庫中的所有包和模組組成。 demo.html- 運行Brython的簡單HTML頁面，展示了一些有趣的用例和我們如何利用Brython修改靜態HTML頁面的示例。 index.html- 一個簡單的HTML頁面。Hello World 若簡單的將Web瀏覽器打開，則有其局限性，故建議先啟動本地主機伺服器。 安裝后，我們可以啟動伺服器： $ python3 -m http.server 在（預設）上啟動本地主機，並且您應該能夠通過導航到所選Web瀏覽器的位址欄來訪問該頁面。port 8000demo.htmlhttp://localhost:8000/demo.htmlhttp://0.0.0.0:8000/demo.html 如果埠 8000 當前由其他進程使用，則必須定義要使用的另一個埠（例如 8080）： $ python3 -m http.server 8080 要創建能夠運行Python的新HTML頁面，需要在檔部分中導入theandfiles。然後繼續在HTML檔本身中編寫Python：brython.jsbrython_stdlib.jshead <script src="brython.js"></script> <script src="brython_stdlib.js.js"></script> Brython運作 Brython 使我們能夠通過將Python代碼轉換為JavaScript在瀏覽器中編寫和運行Python代碼。這段代碼將能在所有支援JavaScript的瀏覽器中運行，因為Brython故意避免使用新的、不受支援的語法生成JavaScript。 可將轉譯視為編譯子集。 編譯過程通常用高級程式設計語言（例如C）編寫的原始程式碼轉換為較低級別的語言（例如機器代碼）。 轉譯是將高級語言轉換為另一種高級語言（例如Python到JavaScript）。 Brython中的轉譯發生在載入HTML頁面的同時。用HTML文件標籤中的函數：brython()body <body onload="brython()"> 該函數執行寫在HTML文件標籤中的Python代碼的轉譯。所有Python代碼須用標籤括起來：brython()<script type="text/python"> <script type="text/python"> <script type="text/python">  <!-- Python code --> </script> 或者，使用以下命令將其載入到HTML文件中來包含外部Python代碼： <script type="text/python" src="test.py"></script> 所有Web瀏覽器都支援JavaScript作為主要語言，但不支援Python。因此，所有 Python 代碼都需轉換為 JavaScript，然後在載入 HTML 頁面所需的時間內運行。 該函數通過檢查所有具有 of 類型的腳本來搜索 HTML 頁面中的所有 Python 代碼，然後將所有代碼轉換為 JavaScript：brython()text/python 此轉換的結果是 JavaScript 代碼的簡單字串表示。該字串必須在瀏覽器中作為 JavaScript 代碼運行。 Brython 使用 JavaScriptfunction 來運行所有翻譯後的代碼。它可以使用 JavaScript 命令在某些瀏覽器上執行代碼。eval()new Function(function_name, source)(module) 這不是運行 JavaScript 的首選方式。可能是危險的，因為它可能會將應用程式暴露給潛在的惡意第三方代碼。與替代方案相比，速度慢。eval()eval() 如果 Python 代碼通過 HTML 文件載入，Brython 將執行 Ajax 調用以獲取載入檔的內容。該代碼被轉換為JavaScript，並以與上述相同的方式執行。<script type="text/python" src="url"> 與Brython合作 - 示例 回顧幾個例子，以便瞭解 Brython 的工作原理及功能： 世界您好 <html>  <head>  <script src="/brython.js"></script>  </head>  <body onload="brython()">  <script type="text/python">  import browser  browser.document <= "Hello world!"  </script>  </body> </html> 我們將專注於標籤之間的 Python 代碼：<script type="text/python"></script> import browser將包載入到腳本中。它是將所有Brython特定的名稱和模組分組的包，主要用於表示JavaScript中使用的DOM元素和事件。browser browser.document是表示當前顯示的 HTML 文件的物件。 browser.document <= "Hello world!"- 我們使用符號而不是“接收”包含字串的新元素。另一種方法是使用以下語法：<==documentHello world!browser.document.attach("Hello world!") 在用戶端，一旦呈現此代碼 - 它會導致： <html>  <head>  <script src="/brython.js"></script>  </head>  <body onload="brython()">  Hello world!  </body> </html> 添加元素和屬性 修改示例，並添加一些段落和文本格式。該介面提供了模組，它公開了 HTML 標籤，可以用這些標籤從 Python 代碼動態創建 HTML 結構。建立物件的語法為：browserhtml browser.html.TAG("content", [attributes]) 哪些輸出： <TAG [attributes]>content</TAG> browser.html.H2("Hello world!")用標籤包裝字串。Hello world<h2> browser.html.A("link", href="stackabuse.com")創建安塔格。<a href="stackabuse.com"> 可以進行嵌套，只需在另一個元素中包含 an即可。讓我們在頁面中添加一些元素：html.element <html>  <head>  <script src="/brython.js"></script>  </head>  <body onload="brython()">  <script type="text/python">  import browser    title = browser.html.H2("Hello world!")  bold = browser.html.B("bold text")  url = browser.html.A("link", href="stackabuse.com")  paragraph = browser.html.P("This is a paragraph. This is " + bold + ", and this is a " + url)  browser.document <= title  browser.document <= paragraph   </script>  </body> </html> 可以創建沒有參數的物件並構建它，而不是使用這樣的參數創建物件： url = browser.html.A("link", href="stackabuse.com") # Creating an <a></a> tag url = browser.html.A() # Adding content between created tags # <a>Url Text</a> url <= "Url Text" # Adding href attribute # <a href="stackabuse.com">Url Text</a> url.href = "stackabuse.com" 完成 Python 代碼並打開頁面時 - 生成的 HTML 頁面應如下所示： <html>  <head>  <script src="/brython.js"></script>  </head>  <body onload="brython()">  <h2>Hello world!</h2>  <p>  This is a paragraph. This is <b>bold text</b>, and this is a   <a href="stackabuse.com">link</a>.  </p>  </body> </html> 我們有aelement，在其中我們使用aandelement，事先構建。<p><b><a> 使用 Brython 建立表 可以用一直應用的大致相同的邏輯創建表：table = browser.html.TABLE() 創建幾行包含一些模擬資料並將它們添加到：table # Creating the row row = browser.html.TR() # Adding header cells row <= browser.html.TH("Header1") row <= browser.html.TH("Header2") # Appending the row to the table table <= row # Adding a first row row = browser.html.TR() row <= browser.html.TD("Data 1") row <= browser.html.TD("Data 2") table <= row 最後選擇在 HTML 頁面上創建的 bankelement 中顯示表：<div id="table-zone"> tableZone = browser.document["table-zone"]  tableZone <= table 導致我們頁面上的 HTML 表格： <div id="table-zone">  <table>  <thead>  <tr>  <th>Header 1</th>  <th>Header 2</th>  </tr>  </thead>  <tbody>  <tr>  <td>Data 1</td>  <td>Data 2</td>  </tr>  </tbody>  </table> </div> 向現有元素添加樣式 為元素添加一些樣式：<div id="table-zone">table tableZone.style = {  "background-color": "#dedfdd",  "width": "50%",  "min-height": "100px",  "margin": "auto"  }   table.style = {  "border": "1px solid #333",  "margin": "auto"  } 這將導致修改的 HTML 標記，並添加屬性：style <div id="table-zone" style="background-color: rgb(222, 223, 221); width: 50%; min-height: 100px; margin: auto;">   <table style="border: 1px solid rgb(51, 51, 51); margin: auto;"> 綁定操作和從元素讀取內容 網頁可用於顯示數據和捕獲數據。表單是提示使用者發送數據的方式之一。 在Brython中創建一個表單，使用函數和HTML元素，如and：FORM()INPUT()LABEL() # Create a <div id="form-div"> element as a container for a new form formDiv = browser.html.DIV(id="form-div") # Create a <form> element  form = browser.html.FORM() # Create the <input type="text"> field wit the label and add it to the form input = browser.html.INPUT() input.type = "text" input.id = "input-name" # Add label and to the form form <= browser.html.LABEL("Enter your name: ") + input # Create the submit button and add it to the form button = browser.html.INPUT() button.type = "button" button.value = "Submit" button.id = "submit-button" form <= button # Add form to the container <div> element formDiv <= form # Add the <h4 id="form-response"> to show the value from the form formDiv <= browser.html.H4("Your name is: ", id="form-response") # Display the div element containing form on the page browser.document <= formDiv 不執行任何操作的表單不是很有用。在 Brython 中使用自定義函數。創建一個名為 uponing the button 的 Python 函數。它將提醒使用者按鈕已被按下並更新元素的值：clicksubmit<h4 id="form-response"> def onSubmit(ev):  # Get the value of the <input id="input-name"> field  name = browser.document["input-name"].value  # Append the stored value to the content in the <h4 id="form-response"> tag  browser.document["form-response"] <= name  # Alert the user that the button has been clicked  browser.alert("The Submit Button is Clicked")  將事件與創建的函數綁定，以便在按下按鈕時獲得所需的行為：clicksubmit-buttononSubmit() browser.document["submit-button"].bind("click", onSubmit) Brython與替代品相比 除了Brython之外，還有其他決方案可以在Web瀏覽器中運行Python代碼 系統 編譯時間 運行機制 布萊頓 頁面載入時 將 Python 轉換為 JavaScript 轉譯 超前 將 Python 轉換為 JavaScript 巴達維亞 超前 瀏覽器中的 Python 運行時 斯庫爾普特 頁面載入後 將 Python 轉換為 JavaScript 派皮.js 頁面載入後 瀏覽器中的 Python 運行時 吡啶 頁面載入後 瀏覽器中的 Python 運行時 其中一些傾向於完全取代JavaScript，另一些只是為Web瀏覽器創建一個有用的Python環境，作為JavaScript的可能替代品。一些解決方案正在將Python代碼轉換為JavaScript，如Brython，Skulpt和Transcrypt。 就編譯時間而言，它是在載入 HTML 文件之前、之後或載入時執行的。 Python代碼執行速度進行基準測試時，Brython處於更快的一端。提前將 Python 編譯（轉譯）為 JavaScript 的解決方案與包含翻譯代碼的大檔之間進行折衷，客戶端必須（向下）載入這些檔才能以“提前”方法運行腳本。 Brytho非常接近那個甜蜜點。 基準測試顯然不能總是代表現實世界的情況，因為結果可能因執行的代碼而異，但它們可以在不同解決方案的性能之間提供很好的比較。 注意：Brython 比只對相同的代碼使用 JavaScript 慢。因為增加了轉譯步驟，它不會完全是0ms，之後運行JavaScript代碼。 結論 如果你正在尋找JavaScript作為Web腳本語言的替代品，並且不太關心性能，那麼Brython可能是一個很好的解決方案。 它在執行速度和載入庫所需的多餘記憶體使用之間不可避免的權衡的平衡方法使其成為在瀏覽器中運行 Python 的最佳性能解決方案之一。 Brython沒有龐大的社區和廣泛地使用。學習資源有限，局限於官方文檔，而沒有大型專案可以尋求指導。 是否值得取代JavaScript。即使是小規模的 Brython 專案，與用 JavaScript 編寫的完全相同的專案相比，執行速度也會慢 2 倍。JavaScript擁有龐大的開發人員社區，大量資源和現實世界的專案 JavaScript框架，是JavaScript流行的支柱。如果沒有他們的説明，JavaScript 只是另一種腳本語言，它為我們提供了動態更改靜態 HTML 頁面內容的能力。例如純JavaScript編寫複雜的伺服器端邏輯。即使可行，也不會是一次愉快的經歷。 Brython沒有為它開發的框架，只能使用純Python代碼，這對於簡單的用例之外的任何事情都是不合理的。無法像使用 JavaScript 和 Angular 那樣使用 Brython 創建一些複雜的單頁 Web 應用程式。對於只想使用Python進行伺服器端和用戶端程式設計來說，Brython是一個很好的工具，但還無法取代JavaScript \n \n \n', 'tags': '', 'url': 'Guide to Brython H1.html'}, {'title': 'hw', 'text': '', 'tags': '', 'url': 'hw.html'}, {'title': 'w10', 'text': '心得: \n w10 將a班缺考人員程式和a班考試成績程式結合，這次的作業相對簡單，只要將老師給的2個程式並在一起在稍加修改即可，但這次缺考和考0分都顯示0分所以讓我意識到其實如果上課還繼續玩手機看漫畫回家還不看老師錄製的影片，考試時才到該影片或該週內容查看的話其實頂多答2-3題時間就到了而且該題要得到分數的話該題的所有小題都要答對。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'HW1', 'text': '\xa01a缺考人員學號 \n 1a缺考人員學號 \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 若缺考者得分為0分,則1a人員學號和本次考試成績: \n \xa0 學號 和成績 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': '列出1,3,5,7,9 \n 列出1,3,5,7,9 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  list_1a_static_site.py+random_draw_1a  \n \n \n  list_1a_static_site.py+random_draw_1a結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'HW2.html'}, {'title': 'w12', 'text': '\n 溫度轉換公式\xa0\n f = c*9/5 + 32 \n c = (f-32)*5/9 \n \n \n \n \'\'\'\nf = c*9/5 + 32\nc = (f-32)*5/9\n\'\'\'\nc = input("請輸入攝氏溫度值")\n#print(type(c))\nc = float(c)\nprint(c, c*9/5 +32) \n \n \n \n \n  \n在動態網站頁面中啟用 Brython 執行環境的用法, 請注意動態網站執行所在路徑\n \n \n \n  啟動 Brython  \n \n \n  以下事先在頁面中加入 id="brython_div" 的 div 標註\n之後可利用 Brython 的 document 模組與此 html 標註對應\n \n  利用 html 建立一個 id="btn1" 的按鈕  \n 取使用者輸入 \n \n \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '\n f = c*9/5 + 32 \n c = (f-32)*5/9 溫度轉換成是範例1 ex1 ex2 心得: 待更新 \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w14', 'text': '', 'tags': '', 'url': 'w14.html'}, {'title': 'w15', 'text': '心得: \n \n w15 利用視覺暫留(透過html5 canvas) 做出動畫 經過反覆使用#(單行註解)嘗試寫程式後發現才原程式(h>=<n)為綠色格子重頭走到尾(ex右上到左上)，而(s 1:)是指每次走一格，剛開始還不了解程式，以為只要將s 1:改成s 1/2:綠色格子就能走到第8格(中間)後依照後面程式轉向，結果實際情況是移動速度變慢還脫出一排白色腳印，一直到後來詢問同學後才發現。完成這次作業後讓我對寫程式有更深的了解，和學習自己註解程式(使用#解釋該程式的意思或如何作用)的重要性。 \n doc透過id 在超文件中找到位置，並取出 canvas中的2d分支(canvas.getcontext) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0canvas中的3d分支(webgl) \n 1.為何學習計算機程式需要建立個人倉儲? \n \xa0 \xa0 不但能建立網站，而且也能了解當前的版本和改版過程資訊，且之後會有協同相關課程，沒有個人的倉儲就無法與他人進行協同 \n 2.全球資訊網能夠提供甚麼功能或有什麼優點? \n \xa0 \xa0 能將圖片和連結塞入網頁中，還能將文字、檔案，超文件格式化 \n 3.Replit, stud.cycu.org 與 localhost 分別代表甚麼? \n \xa0 \xa0 分別代表3種維護倉儲的方法 \n \xa0 \xa0 Replit : 別人寫的程式 \n \xa0 \xa0 stud.cycu.org : 自己寫的程式 \n \xa0 \xa0 localhost : 是一個在電腦網路中用於表示「此電腦」的主機名。它被用於通過本地環回網路介面，來存取本機執行的服務，並且將會繞過任何物理網路介面硬體。 \n 4.https, ssh 到底提供使用者那些功能或優點? \n \xa0 \xa0 HTTP 全名是 超文本傳輸協定，內容只規範了客戶端請求與伺服器回應的標準，實際上是藉由 TCP 作為資料的傳輸方式。 \n \xa0 \xa0 SSH（Secure Shell，安全外殼）是一種網路安全協定，通過加密和認證機制實現安全的訪問和檔傳輸等業務。傳統遠端登錄或檔傳輸方式，例如Telnet、FTP，使用明文傳輸數據，存在很多的安全隱患。隨著人們對網路安全的重視，這些方式已經慢慢不被接受。SSH協議通過對網路數據進行加密和驗證，在不安全的網路環境中提供了安全的登錄和其他安全網路服務。作為Telnet和其他不安全的遠端shell協定的安全替代方案，目前SSH協議已經被全世界廣泛使用，大多數設備都支援SSH功能。 \n 5.Brython 與 Python 有甚麼差別? \n \xa0 \xa0 因javascript書寫的程式太過鬆散，可使用typescript，但Brython比typescript簡單，且目前使用Brython就夠了 \n \xa0 \xa0 Brython : 在瀏覽器用 Python 取代 JavaScript \n \xa0 \xa0 Python : 簡潔有力、便於閱讀、是一種學習門低、程式碼簡潔、功能多且有完整的標準程式庫模組還能支援多種編寫方式，包括物件導向、命令式、函數式、程序式，但Python 執行速度較慢且Python的強制縮排，單行語句在結尾不寫分號所以一行就只能有一條語句，在剛開始使用時會不太適應 \n 6.能夠直接在瀏覽器中以 Brython 繪製中華民國國旗, 或模擬綠色方塊在方塊格點中任意移動, 代表甚麼? \n \xa0 \xa0 代表程式正確無誤 \n 7.變數, 字串, 整數, 浮點數, 數列, Tuple, Dictionary, 函式, 重複迴圈, class, 物件導向, 資料庫, 這些名詞對您而言代表甚麼? \n \xa0 \xa0 變數 : 一個已知或未知數值或資訊的儲存位址，以及相對應之符號名稱。 \n \xa0 \xa0 字串 : 是由n個字元組成的有限序列 \n \xa0 \xa0 整數 : 沒有小數點或分數的數字ex1、2、3... \n \xa0 \xa0 浮點數 : 對於實數近似值數值的表現法，由尾數加上冪數來表示，通常是乘以某個基數的整數次指數得到。以這種表示法表示的數值 \n \xa0 \xa0 數列 : 一列數字 \n \xa0 \xa0 Tuple : 存資料的「容器」，可以將物件存入，變成有順序的序列結構 \n \xa0 \xa0 Dictionary : 字典的意思，可用來查詢看懂的單字(詞)) \n \xa0 \xa0 函式 : 把常用的程式碼包裝在一個區塊中，方便我們在寫程式時隨時呼叫、使用 \n \xa0 \xa0 重複迴圈 : 重覆執行程式 \n \xa0 \xa0 class : 教室的意思 \n \xa0 \xa0 物件導向 : 把大部分程式內的東西都變成以物件的方式呈現 \n \xa0 \xa0 資料庫 : 儲存資料的地方 \n \n \n 修改以下程式 \n 原程式 \n 更新後 \n', 'tags': '', 'url': 'w15.html'}, {'title': 'cp2022', 'text': 'w6 test \n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n', 'tags': '', 'url': 'cp2022.html'}, {'title': 'Brython', 'text': '======= \n cmsite: wcms use  https://github.com/mdecycu/cmsimde  as submodule\xa0 \n >>>>>>> 17bc60d30eb0377058d1a2b85743ac3c40cf46dd \n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'Brython.html'}]};